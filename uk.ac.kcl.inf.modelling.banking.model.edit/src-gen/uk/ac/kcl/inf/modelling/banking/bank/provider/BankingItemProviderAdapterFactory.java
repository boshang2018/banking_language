/**
 */
package uk.ac.kcl.inf.modelling.banking.bank.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import uk.ac.kcl.inf.modelling.banking.bank.util.BankingAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class BankingItemProviderAdapterFactory extends BankingAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BankingItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.kcl.inf.modelling.banking.bank.Bank} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BankItemProvider bankItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.kcl.inf.modelling.banking.bank.Bank}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBankAdapter() {
		if (bankItemProvider == null) {
			bankItemProvider = new BankItemProvider(this);
		}

		return bankItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.kcl.inf.modelling.banking.bank.Account} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AccountItemProvider accountItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.kcl.inf.modelling.banking.bank.Account}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAccountAdapter() {
		if (accountItemProvider == null) {
			accountItemProvider = new AccountItemProvider(this);
		}

		return accountItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.kcl.inf.modelling.banking.bank.Manager} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ManagerItemProvider managerItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.kcl.inf.modelling.banking.bank.Manager}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createManagerAdapter() {
		if (managerItemProvider == null) {
			managerItemProvider = new ManagerItemProvider(this);
		}

		return managerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.kcl.inf.modelling.banking.bank.Client} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClientItemProvider clientItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.kcl.inf.modelling.banking.bank.Client}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClientAdapter() {
		if (clientItemProvider == null) {
			clientItemProvider = new ClientItemProvider(this);
		}

		return clientItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.kcl.inf.modelling.banking.bank.BankingProgram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BankingProgramItemProvider bankingProgramItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.kcl.inf.modelling.banking.bank.BankingProgram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBankingProgramAdapter() {
		if (bankingProgramItemProvider == null) {
			bankingProgramItemProvider = new BankingProgramItemProvider(this);
		}

		return bankingProgramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.kcl.inf.modelling.banking.bank.Script} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScriptItemProvider scriptItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.kcl.inf.modelling.banking.bank.Script}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScriptAdapter() {
		if (scriptItemProvider == null) {
			scriptItemProvider = new ScriptItemProvider(this);
		}

		return scriptItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.kcl.inf.modelling.banking.bank.ScriptStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScriptStepItemProvider scriptStepItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.kcl.inf.modelling.banking.bank.ScriptStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScriptStepAdapter() {
		if (scriptStepItemProvider == null) {
			scriptStepItemProvider = new ScriptStepItemProvider(this);
		}

		return scriptStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.kcl.inf.modelling.banking.bank.Withdrawal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WithdrawalItemProvider withdrawalItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.kcl.inf.modelling.banking.bank.Withdrawal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWithdrawalAdapter() {
		if (withdrawalItemProvider == null) {
			withdrawalItemProvider = new WithdrawalItemProvider(this);
		}

		return withdrawalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.kcl.inf.modelling.banking.bank.Deposit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DepositItemProvider depositItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.kcl.inf.modelling.banking.bank.Deposit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDepositAdapter() {
		if (depositItemProvider == null) {
			depositItemProvider = new DepositItemProvider(this);
		}

		return depositItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.kcl.inf.modelling.banking.bank.CreateAccount} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreateAccountItemProvider createAccountItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.kcl.inf.modelling.banking.bank.CreateAccount}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreateAccountAdapter() {
		if (createAccountItemProvider == null) {
			createAccountItemProvider = new CreateAccountItemProvider(this);
		}

		return createAccountItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (bankItemProvider != null)
			bankItemProvider.dispose();
		if (accountItemProvider != null)
			accountItemProvider.dispose();
		if (managerItemProvider != null)
			managerItemProvider.dispose();
		if (clientItemProvider != null)
			clientItemProvider.dispose();
		if (bankingProgramItemProvider != null)
			bankingProgramItemProvider.dispose();
		if (scriptItemProvider != null)
			scriptItemProvider.dispose();
		if (scriptStepItemProvider != null)
			scriptStepItemProvider.dispose();
		if (withdrawalItemProvider != null)
			withdrawalItemProvider.dispose();
		if (depositItemProvider != null)
			depositItemProvider.dispose();
		if (createAccountItemProvider != null)
			createAccountItemProvider.dispose();
	}

}
